// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KataFizzBuzz.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConvertANumberToASpecifyWordFeature : Xunit.IClassFixture<ConvertANumberToASpecifyWordFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FirstScenario.feature"
#line hidden
        
        public ConvertANumberToASpecifyWordFeature(ConvertANumberToASpecifyWordFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Convert a number to a specify word", "In order to avoid silly mistakes\r\nAs a collegean student\r\nI want to convert a num" +
                    "ber to a string for practising multiply", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Convert a number multipleofthree to Fizz")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Convert a number multipleofthree to Fizz")]
        [Xunit.InlineDataAttribute("3", "Fizz", new string[0])]
        [Xunit.InlineDataAttribute("6", "Fizz", new string[0])]
        [Xunit.InlineDataAttribute("9", "Fizz", new string[0])]
        [Xunit.InlineDataAttribute("12", "Fizz", new string[0])]
        public virtual void ConvertANumberMultipleofthreeToFizz(string numberMultipleOfThree, string word, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a number multipleofthree to Fizz", null, exampleTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
testRunner.When(string.Format("I ask to convert a {0}", numberMultipleOfThree), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
testRunner.Then(string.Format("The result of the conversion should be a {0}", word), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Convert a number multipleoffive to Buzz")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Convert a number multipleoffive to Buzz")]
        [Xunit.InlineDataAttribute("5", "Buzz", new string[0])]
        [Xunit.InlineDataAttribute("10", "Buzz", new string[0])]
        [Xunit.InlineDataAttribute("20", "Buzz", new string[0])]
        public virtual void ConvertANumberMultipleoffiveToBuzz(string numberMultipleOfFive, string word, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a number multipleoffive to Buzz", null, exampleTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
testRunner.When(string.Format("I ask to convert a {0}", numberMultipleOfFive), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
testRunner.Then(string.Format("The result of the conversion should be a {0}", word), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Convert a number multipleofthreeandfive to FizzBuzz")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Convert a number multipleofthreeandfive to FizzBuzz")]
        [Xunit.InlineDataAttribute("15", "FizzBuzz", new string[0])]
        [Xunit.InlineDataAttribute("30", "FizzBuzz", new string[0])]
        [Xunit.InlineDataAttribute("45", "FizzBuzz", new string[0])]
        public virtual void ConvertANumberMultipleofthreeandfiveToFizzBuzz(string numberMultipleOfThreeAndFive, string word, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a number multipleofthreeandfive to FizzBuzz", null, exampleTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
testRunner.When(string.Format("I ask to convert a {0}", numberMultipleOfThreeAndFive), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
testRunner.Then(string.Format("The result of the conversion should be a {0}", word), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Convert a number non multipleofthreeandfive to itself")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Convert a number non multipleofthreeandfive to itself")]
        [Xunit.InlineDataAttribute("1", "1", new string[0])]
        [Xunit.InlineDataAttribute("2", "2", new string[0])]
        [Xunit.InlineDataAttribute("4", "4", new string[0])]
        [Xunit.InlineDataAttribute("7", "7", new string[0])]
        public virtual void ConvertANumberNonMultipleofthreeandfiveToItself(string numberNonMultiple, string word, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert a number non multipleofthreeandfive to itself", null, exampleTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
testRunner.When(string.Format("I ask to convert a {0}", numberNonMultiple), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then(string.Format("The result of the conversion should be a {0}", word), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Prohibit zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Prohibit zero")]
        public virtual void ProhibitZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prohibit zero", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
testRunner.When("I ask to convert a 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
testRunner.Then("An Error indicates \"zero can\'t be converted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Prohibit numbers greater than 100")]
        [Xunit.TraitAttribute("FeatureTitle", "Convert a number to a specify word")]
        [Xunit.TraitAttribute("Description", "Prohibit numbers greater than 100")]
        [Xunit.InlineDataAttribute("101", new string[0])]
        [Xunit.InlineDataAttribute("110", new string[0])]
        [Xunit.InlineDataAttribute("135", new string[0])]
        [Xunit.InlineDataAttribute("145", new string[0])]
        [Xunit.InlineDataAttribute("210", new string[0])]
        public virtual void ProhibitNumbersGreaterThan100(string number, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prohibit numbers greater than 100", null, exampleTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 50
testRunner.When(string.Format("I ask to convert a {0}", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
testRunner.Then("An Error indicates \"number cannot be greater than 100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ConvertANumberToASpecifyWordFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ConvertANumberToASpecifyWordFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
